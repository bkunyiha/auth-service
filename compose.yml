services:
  # Main application service - serves protected content and validates tokens
  app-service:
    image: bkunyiha/app-service            # Tag for Docker Hub push
    restart: "always"                      # Auto-restart on crash
    hostname: app-service
    environment:
      AUTH_SERVICE_IP: ${AUTH_SERVICE_IP:-localhost} # Auth service hostname for token validation
    ports:
      - "8000:8000"                        # Expose to host (routed via Nginx)
    depends_on:                            # Wait for auth-service to be ready
      auth-service:
        condition: service_started
    networks:
      - app-network

  # Authentication service - handles login, 2FA, token generation/validation
  auth-service:
    image: bkunyiha/auth-service           # Tag for Docker Hub push
    restart: "always"                      # Auto-restart on crash
    hostname: auth-service
    ports:
      - "3000:3000"                        # Expose to host (routed via Nginx)
    environment:
      JWT_SECRET: ${JWT_SECRET}            # Secret for signing JWT tokens
      APP_SERVICE_HOST: ${APP_SERVICE_HOST} # CORS configuration
      DATABASE_URL: "postgres://postgres:${POSTGRES_PASSWORD}@db:5432" # User data storage
      POSTMARK_AUTH_TOKEN: ${POSTMARK_AUTH_TOKEN} # Email service API key
      EMAIL_SERVICE_HOST: ${EMAIL_SERVICE_HOST}   # Email service hostname
      EMAIL_FROM_USER: ${EMAIL_FROM_USER}         # Sender email address
      EMAIL_TIMEOUT_MILLIS: ${EMAIL_TIMEOUT_MILLIS} # Email timeout
    depends_on:
      - db                                 # Wait for database to be ready
    networks:
      - app-network

  # PostgreSQL database - stores user accounts and authentication data
  db:
    image: postgres:15.2-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Database password from env vars
    ports:
      - "5432:5432"                          # Expose for external connections
    volumes:
      - db:/var/lib/postgresql/data          # Persist database data
    networks:
      - app-network

  # Redis cache - stores 2FA codes and banned tokens
  redis:
    image: redis:7.0-alpine
    restart: always
    ports:
      - "6379:6379"                          # Expose for external connections
    networks:
      - app-network  

  # Nginx reverse proxy - handles SSL termination and routes traffic
  web-server:
    image: nginx:mainline-alpine
    restart: "always"                        # Auto-restart on crash
    hostname: web-server
    ports:
      - "80:80"                              # HTTP (for ACME challenges)
      - "443:443"                            # HTTPS (main traffic)
    volumes:
      - web-root:/var/www/html               # Static files (ACME challenges)
      - ./nginx-conf:/etc/nginx/conf.d       # Nginx configuration
      - ./certbot-etc:/etc/letsencrypt       # SSL certificates
      - ./certbot-var:/var/lib/letsencrypt   # Let's Encrypt working files
      - dhparam:/etc/ssl/certs               # DH parameters for SSL
    depends_on:                              # Wait for both services to be ready
      auth-service:
        condition: service_started
      app-service:
        condition: service_started
    networks:
      - app-network

  # SSL certificate manager - obtains/renews Let's Encrypt certificates
  certbot:
    image: certbot/certbot
    volumes:
      - web-root:/var/www/html               # ACME challenge files
      - ./certbot-etc:/etc/letsencrypt       # Certificate storage
      - ./certbot-var:/var/lib/letsencrypt   # Let's Encrypt working directory
    depends_on:
      web-server:                            # Wait for Nginx to be ready
        condition: service_started
    command: certonly --verbose --webroot --webroot-path=/var/www/html --email bkunyiha@billkunyiha.com --agree-tos --no-eff-email --force-renewal -d app-service.billkunyiha.com -d auth-service.billkunyiha.com;
    networks:
      - app-network

volumes:
  # SSL certificate storage - shared between Nginx and Certbot
  certbot-etc:       # Stores SSL certificates. Mounted at /etc/letsencrypt in containers
  certbot-var:       # Stores Let's Encrypt working files. Mounted at /var/lib/letsencrypt in containers
  
  # Web root - ACME challenge files for SSL certificate validation
  web-root:          # Stores website files
    driver: local    # Uses local filesystem storage
    driver_opts:     # Specific options for the volume
      type: none     # Direct mount (no special filesystem)
      device: ./mount_dir/auth-service/html/  # Source path on host
      o: bind        # Bind mount type
  
  # SSL DH parameters - for enhanced SSL security
  dhparam:
    driver: local
    driver_opts:
      type: none
      device: ./mount_dir/dhparam/
      o: bind
  
  # Database storage - persistent PostgreSQL data
  db:
    driver: local
    driver_opts:
      type: none
      device: ./mount_dir/postgres/
      o: bind

# Internal network for service communication
networks:
  app-network:
      driver: bridge  # Default Docker bridge network
